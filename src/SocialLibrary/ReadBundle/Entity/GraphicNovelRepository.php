<?php

namespace SocialLibrary\ReadBundle\GraphicNovelBundle\Entity;

use Application\Sonata\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;

/**
 * GraphicNovelRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GraphicNovelRepository extends EntityRepository
{
    public function findAllPaginated($paginator, $page, User $user = null)
    {
        $query = $this
            ->getEntityManager()
            ->createQueryBuilder()
            ->select(array('g', 's', 'p', 'c', 'o'))
            ->from('SocialLibraryReadBundleGraphicNovelBundle:GraphicNovel', 'g')
            ->innerJoin('g.serie', 's')
            ->leftJoin('g.picture', 'p')
            ->innerJoin('g.creators', 'c')
            ->leftJoin('g.owners', 'o')
            ->orderBy('g.volume');
        
        if($user != null) {
            $query = $query
                ->where('o.usernameCanonical = :username')
                ->setParameter('username', $user->getUsernameCanonical());
        }
        
        try {
            return $paginator->paginate($query, $page);
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    
    public function findGraphicNovel($id, $nameSlug)
    {
        $query = $this->getEntityManager()
            ->createQuery('SELECT g, s, c, o FROM SocialLibraryReadBundleGraphicNovelBundle:GraphicNovel g
                    JOIN g.serie s
                    JOIN g.creators c
                    LEFT JOIN g.owners o
                    WHERE g.id = :id AND g.nameSlug = :nameSlug')
            ->setParameter('id', $id)
            ->setParameter('nameSlug', $nameSlug);
        
        try {
            return $query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
}
